// Generated by LiveScript 1.5.0
/**
 * @package   WebTorrent DHT
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2017, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var inherits, kRpc, kRpcSocketWebrtc, randombytes, K, noop, BOOTSTRAP_NODES;
  inherits = require('inherits');
  kRpc = require('k-rpc');
  kRpcSocketWebrtc = require('./k-rpc-socket-webrtc');
  randombytes = require('randombytes');
  module.exports = kRpcWebrtc;
  K = 2;
  noop = function(){};
  BOOTSTRAP_NODES = [{
    host: '127.0.0.1',
    port: 16881
  }];
  /**
   * k-rpc modified to work with WebRTC
   *
   * @constructor
   */
  function kRpcWebrtc(options){
    var this$ = this;
    options == null && (options = {});
    if (!(this instanceof kRpcWebrtc)) {
      return new kRpcWebrtc(options);
    }
    options = Object.assign({}, options);
    options.id = options.id || options.nodeId || randombytes(options.idLength || 20);
    options.k = options.k || K;
    options.krpcSocket = options.krpcSocket || kRpcSocketWebrtc(options);
    options.bootstrap = options.nodes || options.bootstrap || BOOTSTRAP_NODES;
    kRpc.call(this, options);
    this.socket.socket.on('node_disconnected', function(id){
      this$.nodes.remove(Buffer.from(id, 'hex'));
    });
    this.nodes.on('added', function(peer){
      this$.socket.socket.add_id_mapping(peer.id.toString('hex'), peer.host || peer.address, peer.port);
    });
    this.nodes.on('removed', function(peer){
      this$.socket.socket.del_id_mapping(peer.id.toString('hex'));
    });
  }
  inherits(noop, kRpc);
  inherits(kRpcWebrtc, noop);
}).call(this);
